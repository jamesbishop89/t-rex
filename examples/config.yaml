# T-Rex Trading System Configuration Example
# This file demonstrates all available configuration options for trading data reconciliation
# ========================================================================================

reconciliation:
  # KEYS SECTION
  # ------------
  # Define the key columns used to match trades between source and target systems
  # Can be a single key or multiple keys for composite matching
  keys: [trade_id, account_id]
  
  # FIELDS SECTION
  # --------------
  # Configure each field with optional mappings, transformations, and tolerances
  # 
  # Available options for each field:
  # - name: Field name (required)
  # - mapping: Value mapping dictionary
  # - conditional_mapping: Conditional value mapping based on another field
  # - transformation: Lambda function for data transformation
  # - tolerance: Tolerance for numeric comparisons (absolute or percentage)
  # - ignore: Boolean to ignore field in comparison
  # - apply_to: Which dataset(s) to apply mapping/transformation to:
  #   * "both" (default) - Apply to both source and target
  #   * "source" - Apply only to source data
  #   * "target" - Apply only to target data
  fields:
    
    # EXAMPLE 1: Trade price with PERCENTAGE tolerance (market volatility)
    - name: execution_price
      tolerance: "0.1%"  # Allow 0.1% difference in execution price
      
    # EXAMPLE 2: Share quantity with ABSOLUTE tolerance
    - name: quantity
      tolerance: 1.0  # Allow difference of 1 share
      
    # EXAMPLE 3: Commission rate with SMALL percentage tolerance
    - name: commission_rate
      tolerance: "0.01%"  # Allow 0.01% difference in commission rate
      
    # EXAMPLE 4: Trade status field with VALUE MAPPING
    - name: trade_status
      mapping:
        "New": "N"
        "Partially Filled": "PF"
        "Filled": "F"
        "Cancelled": "C"
        "Rejected": "R"
        "Pending": "P"
        "NULL": "Unknown"
        "": "Unknown"
      apply_to: "both"  # Apply mapping to both source and target (default behavior)
        
    # EXAMPLE 4b: Source-only mapping example
    - name: source_specific_field
      mapping:
        "Internal_Code_A": "A"
        "Internal_Code_B": "B"
      apply_to: "source"  # Only apply mapping to source data
        
    # EXAMPLE 5: Trade date field with TRANSFORMATION
    - name: trade_date
      transformation: "lambda x: x.strip().replace('/', '-')"
      apply_to: "target"  # Only apply transformation to target data
      
    # EXAMPLE 6: Net amount with TRANSFORMATION + TOLERANCE
    - name: net_amount
      transformation: "lambda x: round(float(x), 2)"
      tolerance: 0.01  # Allow 1 cent difference
      
    # EXAMPLE 7: Asset class with MAPPING + TRANSFORMATION
    - name: asset_class
      mapping:
        "Equity": "EQ"
        "Fixed Income": "FI"
        "Derivatives": "DV"
        "Foreign Exchange": "FX"
        "Commodities": "COM"
        "Alternative": "ALT"
      transformation: "lambda x: x.upper().strip()"
      
    # EXAMPLE 8: Market value with NULL handling
    - name: market_value
      mapping:
        "N/A": 0
        "NULL": 0
        "": 0
        "-": 0
      transformation: "lambda x: float(x) if x else 0"
      tolerance: 0.01
      
    # EXAMPLE 9: Settlement flag conversion
    - name: is_settled
      mapping:
        "Yes": True
        "No": False
        "Y": True
        "N": False
        "1": True
        "0": False
        "Settled": True
        "Pending": False
      
    # EXAMPLE 10: Currency amount with complex transformation
    - name: gross_amount
      transformation: "lambda x: float(x.replace('$', '').replace(',', '').replace('USD', '')) if isinstance(x, str) else float(x)"
      tolerance: "0.01%"
      
    # EXAMPLE 11: Account number standardization
    - name: account_number
      transformation: "lambda x: ''.join(filter(str.isalnum, str(x))).upper()"
      
    # EXAMPLE 12: Field to IGNORE in comparison but include in output
    - name: trader_notes
      ignore: true
      
    # EXAMPLE 13: Timestamp field to ignore
    - name: system_timestamp
      ignore: true
      
    # EXAMPLE 14: PnL percentage field
    - name: pnl_percentage
      transformation: "lambda x: float(x.replace('%', '')) / 100 if '%' in str(x) else float(x)"
      tolerance: "1%"
      
    # CONDITION FIELDS FOR CONDITIONAL MAPPING
    # ========================================
    # These fields are used as conditions for conditional mappings below
    - name: market_code
    - name: trade_type
    - name: counterparty
    
    # CONDITIONAL MAPPING EXAMPLES
    # ============================
    # Conditional mappings apply different value mappings based on another field's value
    # This is useful when the same field has different meaning or formats in different contexts
    #
    # Supported condition types:
    # - 'equals' (default): Apply mapping when condition_field equals specific values
    # =======================
    # CONDITIONAL MAPPING EXAMPLES
    # =======================
    # These examples work with the provided sample data and demonstrate 
    # various conditional mapping capabilities
    
    # EXAMPLE 15: Trade status mapping based on asset class
    # Different asset classes use different status terminology
    - name: trade_status_conditional
      conditional_mapping:
        condition_field: asset_class  # Base the mapping on asset class
        condition_type: "equals"  # When asset_class equals specific value
        condition_value: "EQ"  # For equity trades
        mappings:
          "default":  # When asset_class = "EQ", apply these mappings
            "N": "New"
            "F": "Filled"
            "PF": "Partially Filled"
            "C": "Cancelled"
    
    # EXAMPLE 16: Settlement currency mapping based on market region
    # Different markets have different currency display formats
    - name: settlement_currency
      conditional_mapping:
        condition_field: market_code
        condition_type: "equals"
        condition_value: "US"
        mappings:
          "default":  # For US market trades
            "USD": "US Dollar"
    
    # EXAMPLE 17: Settlement instructions based on asset class  
    # Different asset classes have different settlement conventions
    - name: settlement_instruction
      conditional_mapping:
        condition_field: asset_class
        condition_type: "equals" 
        condition_value: "FI"  # Fixed Income assets
        mappings:
          "default":  # For Fixed Income trades
            "DVP": "Bond Settlement DVP"
            "REPO": "Repurchase Agreement"
    
    # EXAMPLE 18: Advanced condition - starts_with
    # Map account prefixes to account types
    - name: account_type
      conditional_mapping:
        condition_field: account_id
        condition_type: "starts_with"
        condition_value: "ACC"
        mappings:
          "default":  # When account_id starts with "ACC"
            "UNKNOWN": "CUSTOMER_ACCOUNT"
    
    # EXAMPLE 19: Numeric comparison - greater_than
    # Flag high-value trades for special processing
    - name: trade_size_flag
      conditional_mapping:
        condition_field: execution_price
        condition_type: "greater_than"
        condition_value: "200"  # Trades over 200
        mappings:
          "default":
            "NORMAL": "HIGH_VALUE"
            "STANDARD": "HIGH_VALUE"
    
    # EXAMPLE 20: Apply_to parameter - source only mapping
    # Apply different processing rules to source data only
    - name: source_system_flag
      conditional_mapping:
        condition_field: market_code
        condition_type: "equals"
        condition_value: "ASIA"
        apply_to: "source"  # Only apply to source dataset
        mappings:
          "default":
            "": "APAC_SOURCE"  # Add flag for Asian market trades

    # =========================================
    # MORE CONDITIONAL MAPPING EXAMPLES  
    # =========================================
    # The examples above demonstrate basic conditional mapping with the sample data.
    # For comprehensive examples of all 18 condition types (regex, numeric comparisons,
    # list operations, null checks, etc.), see TECHNICAL_DOCS.md
    #
    # Supported condition types:
    # String: equals, not_equals, starts_with, ends_with, contains, not_contains
    # Numeric: less_than, greater_than, less_than_equal, greater_than_equal  
    # List: in_list, not_in_list
    # Pattern: regex_match, regex_not_match
    # Null: is_null, is_not_null

# OUTPUT CONFIGURATION
# ===================
output:
  filename: "trading_reconciliation_results"  # Base filename (timestamp added automatically)
  # Results in files like: trading_reconciliation_results_20250624_143022.xlsx
